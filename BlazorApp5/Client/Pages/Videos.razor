@page "/Videos"
@using BlazorApp5.Shared.Models.AzureVideoIndexer.ListVideos
@inject HttpClient httpClient

<h1>Videos</h1>
@if (IsLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    @foreach (var videoInfo in this.VideosResponse.results)
    {
        <ul>
            <li type="circle">
                @videoInfo.name
                <a href="@this.VideosTranscriptionUrls[videoInfo.id]">Transcripción</a> -
                <a href="@this.VideosEmotionsSentiments[videoInfo.id]">Sentimientos y emociones</a>
            </li>
        </ul>
    }

}

@code {
    private ListVideosResponse VideosResponse { get; set; }
    private Dictionary<string, string> VideosEmotionsSentiments { get; set; }
    private Dictionary<string, string> VideosTranscriptionUrls { get; set; }
    bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        this.IsLoading = true;
        string location = await httpClient.GetStringAsync("VideoIndexer/GetLocation");
        this.VideosResponse = await httpClient.GetFromJsonAsync<ListVideosResponse>("VideoIndexer/ListVideos");
        this.VideosEmotionsSentiments = new Dictionary<string, string>();
        this.VideosTranscriptionUrls = new Dictionary<string, string>();

        foreach (var singleVideo in this.VideosResponse.results)
        {
            //var thumbbailBase64 = await httpClient.GetStringAsync($"VideoIndexer/GetVideoThumbnail" +
            //    $"?videoId={singleVideo.id}&thumbnailId={singleVideo.thumbnailId}");
            //var imgSrc = String.Format("data:image/gif;base64,{0}", thumbbailBase64);
            //this.VideosThumbnails.Add(singleVideo.id, imgSrc);
            var videoAccessToken = await httpClient.GetStringAsync($"VideoIndexer/" +
            $"GetVideoAccessToken?videoId={singleVideo.id}&allowEdit=true");
            string linkTranscription = $"/Video/{singleVideo.accountId}/{singleVideo.id}/{location}/{videoAccessToken}";
            this.VideosTranscriptionUrls.Add(singleVideo.id, linkTranscription);
            string linkEmotionsSentiments = $"/EmotionsSentiments/{singleVideo.id}";
            this.VideosEmotionsSentiments.Add(singleVideo.id, linkEmotionsSentiments);

        };
        this.IsLoading = false;
    }
}
