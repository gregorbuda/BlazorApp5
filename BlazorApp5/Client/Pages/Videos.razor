@page "/Videos"
@using BlazorApp5.Shared.Models.AzureVideoIndexer.ListVideos
@inject HttpClient httpClient

<h1>Videos</h1>
@if (IsLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row">
        @foreach (var videoInfo in this.VideosResponse.results)
        {
            <a href="@this.VideosPageUrls[videoInfo.id]">
                <div class="card" style="width:22rem; height:22rem;">
                    <div class="card-title">
                        @videoInfo.name
                    </div>
                    <img class="card-img-top" src="@this.VideosThumbnails[videoInfo.id]" alt="Card image cap">
                    <div class="card-body">
                        <p class="card-text" style="height:10em;">
                            @videoInfo.description
                        </p>
                    </div>
                </div>
            </a>
        }
    </div>
}

@code {
    private ListVideosResponse VideosResponse { get; set; }
    private Dictionary<string, string> VideosThumbnails { get; set; }
    private Dictionary<string, string> VideosPageUrls { get; set; }
    bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        this.IsLoading = true;
        string location = await httpClient.GetStringAsync("VideoIndexer/GetLocation");
        this.VideosResponse = await httpClient.GetFromJsonAsync<ListVideosResponse>("VideoIndexer/ListVideos");
        this.VideosThumbnails = new Dictionary<string, string>();
        this.VideosPageUrls = new Dictionary<string, string>();

        foreach (var singleVideo in this.VideosResponse.results)
        {
            var thumbbailBase64 = await httpClient.GetStringAsync($"VideoIndexer/GetVideoThumbnail" +
                $"?videoId={singleVideo.id}&thumbnailId={singleVideo.thumbnailId}");
            var imgSrc = String.Format("data:image/gif;base64,{0}", thumbbailBase64);
            this.VideosThumbnails.Add(singleVideo.id, imgSrc);
            var videoAccessToken = await httpClient.GetStringAsync($"VideoIndexer/" +
            $"GetVideoAccessToken?videoId={singleVideo.id}&allowEdit=true");            
            string link = $"/Video/{singleVideo.accountId}/{singleVideo.id}/{location}/{videoAccessToken}";
            this.VideosPageUrls.Add(singleVideo.id, link);

        };
        this.IsLoading = false;
    }
}
